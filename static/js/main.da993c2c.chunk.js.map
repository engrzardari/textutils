{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","handleRedundancy","set1","Set","split","newText","Array","from","join","showAlert","heading","placeholder","onChange","event","target","value","rows","newtext","toLocaleLowerCase","replace","length","defaultProps","aboutSite","App","setMode","setAlert","document","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.da993c2c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return ( \r\n        \r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>{props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n       \r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n            {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                    {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                    <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                </li>\r\n                {/* <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/about\">{props.aboutSite}</Link>\r\n                    <a className=\"nav-link\" href=\"/about\">{props.aboutSite}</a>\r\n                </li>               */}\r\n                </ul>\r\n                {/* <form className=\"d-flex\">\r\n                <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n                <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                </form> */}\r\n                <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                    <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckChecked\"/>\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckChecked\">Enable Dark Mode</label>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </nav>\r\n        </>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title: PropTypes.string.isRequired,\r\n    aboutSite: PropTypes.string.isRequired,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title:'Set Tile Here',\r\n    aboutSite: 'About Us',\r\n  };\r\n\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const [text, setText] = useState('');\r\n\r\n    const handleUpClick=()=>{\r\n        //console.log('Handle on Click' + text);\r\n        if(text!=''){\r\n            let newtext = text.toUpperCase()    ;\r\n            setText(newtext );\r\n            props.showAlert('Text is converted to Upper case','success ')\r\n        }\r\n    }\r\n\r\n    const handleLlowerClick=()=>{\r\n        //console.log('Handle on Click' + text);\r\n        let newtext = text.toLocaleLowerCase();\r\n        setText(newtext );\r\n        props.showAlert('Text is converted to Lower case','success ')\r\n    }\r\n\r\n    const handlePretifyClick=()=>{\r\n        //console.log('Handle on Click' + text);\r\n        // let newtext = text.replace(\"}\",/\\r/+'} ');\r\n        let newtext = text.replace(\"}\",/\\r\\n/);\r\n        setText(newtext);\r\n        props.showAlert('Text is pretified','success ')\r\n    }\r\n\r\n    const handleMinifyClick=()=>{\r\n        //console.log('Handle on Click' + text);\r\n        let newtext = text.replace(/\\n/g, \"\").replace(/\\n/g, \"\");\r\n        setText(newtext );\r\n        props.showAlert('Text is minified','success ')\r\n    }\r\n\r\n    const handleOnChange=(event)=>{\r\n        //console.log('Handle on Change');\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleClear=()=>{\r\n        //console.log('Handle on Click' + text);\r\n        let newtext = '';\r\n        setText(newtext );\r\n        props.showAlert('Text is cleared ','danger ')\r\n    }\r\n    const handleRedundancy = ()=> { \r\n        let set1 = new Set(text.split(\" \"));          \r\n        let newText = Array.from(set1).join(\" \");\r\n        setText(newText);\r\n        props.showAlert('Duplication is removed from your text','success ')\r\n   }\r\n\r\n\r\n    return (\r\n        <>\r\n        <div className={`container my-3 bg-${props.mode==='dark'?'light':'light'}`}>\r\n            <div className=\"mb-3\">\r\n                <label htmlFor=\"myBox\" className={`form-label text-${props.mode==='light'?'dark':'light'}`}>{props.heading}</label>\r\n                <textarea placeholder =\"Enter text here..\" onChange={handleOnChange} className=\"form-control\" id=\"myBox\" rows=\"8\" value={text}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-outline-success\" onClick={handleUpClick}>Convter to Uppercase</button>\r\n            <button className=\"btn btn-outline-success mx-2\" onClick={handleLlowerClick}>Convter to LowerCase</button>\r\n            <button className=\"btn btn-outline-success mx-2\" onClick={handleMinifyClick}>Minify CSS</button>\r\n            <button className=\"btn btn-outline-success mx-2\" onClick={handleRedundancy}>Remove Duplication</button>\r\n            <button className=\"btn btn-outline-success mx-2\" onClick={handleRedundancy}>Remove Extra Spaces</button>\r\n            <button className=\"btn btn-outline-success mx-2\" onClick={handleClear}>Clear Text</button>\r\n        </div>\r\n        <div className=\"container my-3\">\r\n        <h1 className=\"\">Your text Summary</h1>\r\n        <p className=\"\">{text.split(\" \").length} words and {text.length} characters</p>\r\n        <p className=\"\">{0.008 * text.split(\" \").length} minutes read.</p>\r\n        <h2>Preview</h2>\r\n        <p>{text}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React, {useState} from 'react'\nimport './App.css';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const[mode,setMode] = useState('light');\n  const[alert,setAlert] = useState(null);\n\n  const toggleMode =()=>{\n    if(mode==='light'){\n      setMode('dark')\n      showAlert('Dark Mode has been activated.', 'success ');\n      document.title='TextUtils - Dark Mode'\n    }\n    else\n    {\n      setMode('light')\n      showAlert('Light Mode has been activated.', 'success ')\n      document.title='TextUtils - Home'\n    }\n    // setInterval(() => {\n    //   document.title='TextUtils is an Amazing App'\n    // }, 2000);\n\n    // setInterval(() => {\n    //   document.title='TextUtils - Home'\n    // }, 1500);\n\n\n  }\n  // to show alert \n  const showAlert =(message, type)=>{\n    setAlert({\n    msg:message,\n    type : type  \n    })\n    setTimeout(()=>{ \n      setAlert(null)\n    }, 5000);\n  }\n\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title='TextUtils' aboutSite='About' mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      \n        {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading=\"Enter your text here\" mode={mode} toggleMode={toggleMode}/>\n          {/* </Route>\n        </Switch>\n      </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}